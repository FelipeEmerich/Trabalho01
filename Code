import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.time.DayOfWeek;
import java.time.LocalTime;
import java.util.List;

@SpringBootApplication
public class WeeklyScheduleApplication {

    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(WeeklyScheduleApplication.class, args);

        // Inicializar os dados
        WeeklyScheduleService scheduleService = context.getBean(WeeklyScheduleService.class);
        scheduleService.initializeData();

        // Consultar e imprimir o horário semanal
        scheduleService.printWeeklySchedule(1L);
    }
}

@Service
class WeeklyScheduleService {
    private final WeeklyScheduleRepository weeklyScheduleRepository;
    private final TimeSlotRepository timeSlotRepository;
    private final DayOfWeekRepository dayOfWeekRepository;

    public WeeklyScheduleService(WeeklyScheduleRepository weeklyScheduleRepository,
                                 TimeSlotRepository timeSlotRepository,
                                 DayOfWeekRepository dayOfWeekRepository) {
        this.weeklyScheduleRepository = weeklyScheduleRepository;
        this.timeSlotRepository = timeSlotRepository;
        this.dayOfWeekRepository = dayOfWeekRepository;
    }

    @PostConstruct
    public void initializeData() {
        // Inserir dias da semana
        for (DayOfWeekEnum day : DayOfWeekEnum.values()) {
            dayOfWeekRepository.save(new DayOfWeek(day));
        }

        // Inserir intervalos de tempo
        List<DayOfWeek> daysOfWeek = dayOfWeekRepository.findAll();
        for (DayOfWeek day : daysOfWeek) {
            timeSlotRepository.save(new TimeSlot(day, LocalTime.of(9, 0), LocalTime.of(12, 0)));
            timeSlotRepository.save(new TimeSlot(day, LocalTime.of(13, 0), LocalTime.of(17, 0)));
        }

        // Criar e salvar o horário semanal
        WeeklySchedule weeklySchedule = new WeeklySchedule();
        weeklySchedule.setTimeSlots(timeSlotRepository.findAll());
        weeklyScheduleRepository.save(weeklySchedule);
    }

    public void printWeeklySchedule(Long weeklyScheduleId) {
        WeeklySchedule weeklySchedule = weeklyScheduleRepository.findById(weeklyScheduleId)
                .orElseThrow(() -> new RuntimeException("Horário semanal não encontrado"));

        for (TimeSlot timeSlot : weeklySchedule.getTimeSlots()) {
            System.out.println(timeSlot.getDayOfWeek().getDay() + ": " +
                    timeSlot.getStartTime() + " - " + timeSlot.getEndTime());
        }
    }
}
